---
# yaml-language-server: $schema=../../../../platforms/network-schema.json
# This is a sample configuration file for setting up initial Fabric network with 1 RAFT Orderer and 5 Nodes.
network:
  # Network level configuration specifies the attributes required for each organization
  # to join an existing network.
  type: fabric
  # version: 2.2.0                 # currently tested 1.4.8 and 2.2.0
  version: 2.3.1

  chaincode_name: marbles

  frontend: enabled #Flag for frontend to enabled for nodes/peers

  #Environment section for Kubernetes setup
  env:
    type: "dev"              # tag for the environment. Important to run multiple flux on single cluster
    proxy: haproxy                  # values can be 'haproxy' or 'ambassador'
    ambassadorPorts:                # Any additional Ambassador ports can be given here, this is valid only if proxy='ambassador'
      portRange:              # For a range of ports 
        from: 15010 
        to: 15020
    # ports: 15020,15021      # For specific ports
    loadBalancerSourceRanges: # (Optional) Default value is '0.0.0.0/0', this value can be changed to any other IP adres or list (comma-separated without spaces) of IP adresses, this is valid only if proxy='ambassador'
    retry_count: 20                 # Retry count for the checks
    external_dns: disabled           # Should be enabled if using external-dns for automatic route configuration
    annotations:              # Additional annotations that can be used for some pods (ca, ca-tools, orderer and peer nodes)
      service: 
       - example1: example2
      deployment: {} 
      pvc: {}

  # Docker registry details where images are stored. This will be used to create k8s secrets
  # Please ensure all required images are built and stored in this registry.
  # Do not check-in docker_password.
  docker:
    # url: "index.docker.io/hyperledgerlabs"
    url: "hyperledgerlabs"
    # url: "127.0.0.1:5000"
    username: "test_user"
    password: "test_password"
  
  # Remote connection information for orderer (will be blank or removed for orderer hosting organization)
  # For RAFT consensus, have odd number (2n+1) of orderers for consensus agreement to have a majority.
  orderers:
    - orderer:
      type: orderer
      name: orderer1
      org_name: supplychain               #org_name should match one organization definition below in organizations: key            
      # uri: orderer1.org1ambassador.blockchaincloudpoc.com:8443   # Can be external or internal URI for orderer which should be reachable by all peers
      uri: orderer1.ca.rockportsoft.com:8443   # Can be external or internal URI for orderer which should be reachable by all peers
      certificate: /repositories/blockchain-automation-framework/platforms/hyperledger-fabric/configuration/build/crypto-config/ordererOrganizations/supplychain-net/orderers/orderer1.supplychain-net/tls/ca.crt           # Ensure that the directory exists
    - orderer:
      type: orderer
      name: orderer2
      org_name: supplychain               #org_name should match one organization definition below in organizations: key            
      # uri: orderer2.org1ambassador.blockchaincloudpoc.com:8443   # Can be external or internal URI for orderer which should be reachable by all peers
      uri: orderer2.ca.rockportsoft.com:8443   # Can be external or internal URI for orderer which should be reachable by all peers
      certificate: /repositories/blockchain-automation-framework/platforms/hyperledger-fabric/configuration/build/crypto-config/ordererOrganizations/supplychain-net/orderers/orderer2.supplychain-net/tls/ca.crt           # Ensure that the directory exists
    - orderer:
      type: orderer
      name: orderer3
      org_name: supplychain               #org_name should match one organization definition below in organizations: key            
      # uri: orderer3.org1ambassador.blockchaincloudpoc.com:8443   # Can be external or internal URI for orderer which should be reachable by all peers
      uri: orderer3.ca.rockportsoft.com:8443   # Can be external or internal URI for orderer which should be reachable by all peers
      certificate: /repositories/blockchain-automation-framework/platforms/hyperledger-fabric/configuration/build/crypto-config/ordererOrganizations/supplychain-net/orderers/orderer3.supplychain-net/tls/ca.crt           # Ensure that the directory exists
  
  # The channels defined for a network with participating peers in each channel
  channels:
  - channel:
    consortium: Fly2Plan
    channel_name: AllChannel
    orderer: 
      name: supplychain
    participants:
    - organization:
      name: carrier
      type: creator       # creator organization will create the channel and instantiate chaincode, in addition to joining the channel and install chaincode
      org_status: existing
      peers:
      - peer:
        name: peer0
        gossipAddress: peer0.carrier-net.ca.rockportsoft.com:8443  # External or internal URI of the gossip peer
        peerAddress: peer0.carrier-net.ca.rockportsoft.com:8443 # External URI of the peer
      # ordererAddress: orderer1.org1ambassador.blockchaincloudpoc.com:8443             # External or internal URI of the orderer
      ordererAddress: orderer1.ca.rockportsoft.com:8443             # External or internal URI of the orderer
    - organization:      
      name: ansp
      type: joiner        # joiner organization will only join the channel and install chaincode
      org_status: new
      peers:
      - peer:
        name: peer0
        gossipAddress: peer0.ansp-net.ca.rockportsoft.com:8443
        peerAddress: peer0.ansp-net.ca.rockportsoft.com:8443 # External URI of the peer
      ordererAddress: orderer1.ca.rockportsoft.com:8443
    # - organization:
    #   name: warehouse
    #   type: joiner
    #   org_status: new
    #   peers:
    #   - peer:
    #     name: peer0
    #     gossipAddress: peer0.warehouse-net.org2ambassador.blockchaincloudpoc.com:8443
    #     peerAddress: peer0.warehouse-net.org3ambassador.blockchaincloudpoc.com:8443 # External URI of the peer
    #   ordererAddress: orderer1.org1ambassador.blockchaincloudpoc.com:8443
    - organization:
      name: airport
      type: joiner
      org_status: existing
      peers:
      - peer:
        name: peer0
        gossipAddress: peer0.airport-net.ca.rockportsoft.com:8443
        peerAddress: peer0.airport-net.ca.rockportsoft.com:8443 # External URI of the peer
      ordererAddress: orderer1.ca.rockportsoft.com:8443
    endorsers:
      name:
      - carrier
      # - warehouse
      - airport
      - ansp
      corepeerAddress:
      - peer0.carrier-net.ca.rockportsoft.com:8443
      # - peer0.warehouse-net.hf.demo.aws.blockchaincloudpoc.com:8443
      - peer0.airport-net.ca.rockportsoft.com:8443
      - peer0.ansp-net.ca.rockportsoft.com:8443
    genesis:
      name: OrdererGenesis  

  # Allows specification of one or many organizations that will be connecting to a network.
  # If an organization is also hosting the root of the network (e.g. doorman, membership service, etc),
  # then these services should be listed in this section as well.
  organizations:

    # Specification for the 1st organization. Each organization maps to a VPC and a separate k8s cluster
    - organization:
      name: supplychain
      country: UK
      state: London
      location: London
      subject: "O=Orderer,L=51.50/-0.13/London,C=GB"
      type: orderer
      # external_url_suffix: org1ambassador.blockchaincloudpoc.com
      external_url_suffix: ca.rockportsoft.com
      org_status: existing
      ca_data:
        # url: ca.supplychain-net.org1ambassador.blockchaincloudpoc.com:8443
        url: ca.supplychain-net.ca.rockportsoft.com:8443
        certificate: /etc/hyperledger/fabric-ca-server-config/server.crt        # This has not been implemented in 0.2.0.0
  
      cloud_provider: oke   # Options: aws, azure, gcp, digitalocean, minikube
      # aws:
      #   access_key: "aws_access_key"        # AWS Access key, only used when cloud_provider=aws
      #   secret_key: "aws_secret_key"        # AWS Secret key, only used when cloud_provider=aws
  
      # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
      # the cluster has already been created.
      k8s:
        region: "us-phoenix-1"
        context: "context-c667vpx6nga"
        cluster: "cluster-c667vpx6nga"
        config_file: "/home/davidh/.kube/config"

      # Hashicorp Vault server address and root-token. Vault should be unsealed.
      # Do not check-in root_token
      vault:
        # url: "vault_addr"
        url: "http://129.146.202.41:8200"
        root_token: "s.XxiriNSclq7sSf7TXEpxKoOZ"
        secret_path: "secret"
      # Git Repo details which will be used by GitOps/Flux.
      # Do not check-in git_access_token
      gitops:
        git_protocol: "ssh" # Option for git over https or ssh
        git_url: "git@github.com:drhenderson89/baf.git"         # Gitops https or ssh url for flux value files 
        branch: "main"           # Git branch where release is being made
        release_dir: "platforms/hyperledger-fabric/releases" # Relative Path in the Git repo for flux sync per environment. 
        chart_source: "platforms/hyperledger-fabric/charts"     # Relative Path where the Helm charts are stored in Git repo
        git_repo: "github.com/drhenderson89/baf.git"   # Gitops git repository URL for git push  (without https://)
        username: "davidh"          # Git Service user who has rights to check-in in all branches
        # password: "git_access_token"          # Git Server user password/token (Optional for ssh; Required for https)
        email: "davidh@rockportsoft.com"                # Email to use in git config
        private_key: "/home/davidh/gitops_config/gitops"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)
     
      # Services maps to the pods that will be deployed on the k8s cluster
      # This sample is an orderer service and includes a zk-kafka consensus
      services:
        ca:
          name: ca
          # subject: "/C=GB/ST=London/L=London/O=Orderer/CN=ca.supplychain-net.org1ambassador.blockchaincloudpoc.com"
          subject: "/C=GB/ST=London/L=London/O=Orderer/CN=ca.supplychain-net.ca.rockportsoft.com"
          type: ca
          grpc:
            port: 7054
        
        consensus:
          name: raft
          # type: broker        #This field is not consumed for raft consensus
          # replicas: 4         #This field is not consumed for raft consensus
          # grpc:
          #   port: 9092        #This field is not consumed for raft consensus
                
        orderers:
        # This sample has multiple orderers as an example.
        # You can use a single orderer for most production implementations.
        # For RAFT consensus, have odd number (2n+1) of orderers for consensus agreement to have a majority.
        - orderer:
          name: orderer1
          type: orderer
          consensus: raft
          grpc:
            port: 7050
        - orderer:
          name: orderer2
          type: orderer
          consensus: raft
          grpc:
            port: 7050
        - orderer:
          name: orderer3
          type: orderer
          consensus: raft
          grpc:
            port: 7050     
        

    # Specification for the 2nd organization. Each organization maps to a VPC and a separate k8s cluster
    - organization:
      name: airport
      country: GB
      state: London
      location: London
      subject: "O=Airport,OU=Airport,L=51.50/-0.13/London,C=GB"
      type: peer
      external_url_suffix: ca.rockportsoft.com
      org_status: existing
      ca_data:
        url: ca.airport-net.ca.rockportsoft.com:8443
        certificate: /etc/hyperledger/fabric-ca-server-config/server.crt

      cloud_provider: oke   # Options: aws, azure, gcp, digitalocean, minikube
      aws:
        access_key: "aws_access_key"        # AWS Access key, only used when cloud_provider=aws
        secret_key: "aws_secret_key"        # AWS Secret key, only used when cloud_provider=aws
  
      # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
      # the cluster has already been created.
      k8s:
        region: "us-phoenix-1"
        context: "context-c667vpx6nga"
        cluster: "cluster-c667vpx6nga"
        config_file: "/home/davidh/.kube/config"

      # Hashicorp Vault server address and root-token. Vault should be unsealed.
      # Do not check-in root_token
      vault:
        url: "http://129.146.202.41:8200"
        root_token: "s.XxiriNSclq7sSf7TXEpxKoOZ"
        secret_path: "secret"
      # Git Repo details which will be used by GitOps/Flux.
      # Do not check-in git_access_token
      gitops:
        git_protocol: "ssh" # Option for git over https or ssh
        git_url: "git@github.com:drhenderson89/baf.git"         # Gitops https or ssh url for flux value files 
        branch: "main"           # Git branch where release is being made
        release_dir: "platforms/hyperledger-fabric/releases" # Relative Path in the Git repo for flux sync per environment. 
        chart_source: "platforms/hyperledger-fabric/charts"     # Relative Path where the Helm charts are stored in Git repo
        git_repo: "github.com/drhenderson89/baf.git"   # Gitops git repository URL for git push  (without https://)
        username: "davidh"          # Git Service user who has rights to check-in in all branches
        # password: "git_access_token"          # Git Server user password/token (Optional for ssh; Required for https)
        email: "davidh@rockportsoft.com"                # Email to use in git config
        private_key: "/home/davidh/gitops_config/gitops"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)

      # The participating nodes are peers
      # This organization hosts it's own CA server
      services:
        ca:
          name: ca
          subject: "/C=GB/ST=London/L=London/O=Airport/CN=ca.airport-net.ca.rockportsoft.com"
          type: ca
          grpc:
            port: 7054
        peers:
        - peer:
          name: peer0          
          type: anchor    # This can be anchor/nonanchor. Atleast one peer should be anchor peer.         
          gossippeeraddress: peer0.airport-net:7051 # Internal Address of the other peer in same Org for gossip, same peer if there is only one peer 
          peerAddress: peer0.airport-net.ca.rockportsoft.com:8443 # External URI of the peer 
          certificate: "/home/davidh/peerorg/airportca.crt" # certificate path for peer
          cli: enabled      # Creates a peer cli pod depending upon the (enabled/disabled) tag.   
          grpc:
            port: 7051         
          events:
            port: 7053
          couchdb:
            port: 5984
          restserver:           # This is for the rest-api server
            targetPort: 20001
            port: 20001 
          expressapi:           # This is for the express api server
            targetPort: 3000
            port: 3000
          chaincode:
            name: "marbles"   #This has to be replaced with the name of the chaincode
            version: "1"   #This has to be replaced with the version of the chaincode
            maindirectory: "chaincode-external/"    #The main directory where chaincode is needed to be placed
            lang: "golang"  # The language in which the chaincode is written ( golang/java/node )
            repository:
              username: "davidh"          # Git Service user who has rights to check-in in all branches
              password: "git_access_token"
              url: "github.com/drhenderson89/fabric-samples.git"
              branch: main 
              path: "marbles/chaincode-external/"    #The path to the chaincode 
            arguments: '"initMarble","marble2","red","50","tom"'       #Arguments to be passed along with the chaincode parameters
            endorsements: ""          #Endorsements (if any) provided along with the chaincode
            port: 7052
            nodeport:
    
    - organization:
      name: carrier
      country: GB
      state: London
      location: London
      subject: "O=Carrier,OU=Carrier,L=51.50/-0.13/London,C=GB"
      type: peer
      external_url_suffix: ca.rockportsoft.com
      org_status: existing
      ca_data:
        url: ca.carrier-net.ca.rockportsoft.com:8443
        certificate: file/server.crt
      
      cloud_provider: oke   # Options: aws, azure, gcp, digitalocean, minikube
      aws:
        access_key: "aws_access_key"        # AWS Access key, only used when cloud_provider=aws
        secret_key: "aws_secret_key"        # AWS Secret key, only used when cloud_provider=aws
  
      # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
      # the cluster has already been created.
      k8s:
        region: "us-phoenix-1"
        context: "context-c667vpx6nga"
        cluster: "cluster-c667vpx6nga"
        config_file: "/home/davidh/.kube/config"

      # Hashicorp Vault server address and root-token. Vault should be unsealed.
      # Do not check-in root_token
      vault:
        url: "http://129.146.202.41:8200"
        root_token: "s.XxiriNSclq7sSf7TXEpxKoOZ"
        secret_path: "secret"

      # Git Repo details which will be used by GitOps/Flux.
      # Do not check-in git_access_token
      gitops:
        git_protocol: "ssh" # Option for git over https or ssh
        git_url: "git@github.com:drhenderson89/baf.git"         # Gitops https or ssh url for flux value files 
        branch: "main"           # Git branch where release is being made
        release_dir: "platforms/hyperledger-fabric/releases" # Relative Path in the Git repo for flux sync per environment. 
        chart_source: "platforms/hyperledger-fabric/charts"     # Relative Path where the Helm charts are stored in Git repo
        git_repo: "github.com/drhenderson89/baf.git"   # Gitops git repository URL for git push  (without https://)
        username: "davidh"          # Git Service user who has rights to check-in in all branches
        # password: "git_access_token"          # Git Server user password/token (Optional for ssh; Required for https)
        email: "davidh@rockportsoft.com"                # Email to use in git config
        private_key: "/home/davidh/gitops_config/gitops"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)

      services:
        ca:
          name: ca
          subject: "/C=GB/ST=London/L=London/O=Carrier/CN=ca.carrier-net.ca.rockportsoft.com"
          type: ca
          grpc:
            port: 7054
        peers:
        - peer:
          name: peer0          
          type: anchor    # This can be anchor/nonanchor. Atleast one peer should be anchor peer.    
          gossippeeraddress: peer0.carrier-net:7051 # Internal Address of the other peer in same Org for gossip, same peer if there is only one peer
          peerAddress: peer0.carrier-net.ca.rockportsoft.com:8443 # External URI of the peer
          certificate: "/home/davidh/peerorg/carrierca.crt" # certificate path for peer
          cli: enabled      # Creates a peer cli pod depending upon the (enabled/disabled) tag.          
          grpc:
            port: 7051         
          events:
            port: 7053
          couchdb:
            port: 5984
          restserver:
            targetPort: 20001
            port: 20001 
          expressapi:
            targetPort: 3000
            port: 3000
          chaincode:
            name: "marbles"   #This has to be replaced with the name of the chaincode
            version: "1"   #This has to be replaced with the version of the chaincode
            maindirectory: "chaincode-external/"    #The main directory where chaincode is needed to be placed
            lang: "golang"  # The language in which the chaincode is written ( golang/java/node )
            repository:
              username: "davidh"          # Git Service user who has rights to check-in in all branches
              password: "git_access_token"
              url: "github.com/drhenderson89/fabric-samples.git"
              branch: main 
              path: "marbles/chaincode-external/"    #The path to the chaincode 
            arguments: '"initMarble","marble1","blue","35","tom"'       #Arguments to be passed along with the chaincode parameters
            endorsements: ""          #Endorsements (if any) provided along with the chaincode
            port: 7052
            nodeport:
    - organization:
      name: ansp
      country: US
      state: New York
      location: New York
      subject: "O=ANSP,OU=ANSP,L=51.50/-0.13/London,C=GB"
      type: peer
      external_url_suffix: ca.rockportsoft.com
      org_status: new
      ca_data:
        url: ca.ansp-net.ca.rockportsoft.com:8443
        certificate: file/server.crt
      
      cloud_provider: oke   # Options: aws, azure, gcp, digitalocean, minikube
      aws:
        access_key: "aws_access_key"        # AWS Access key, only used when cloud_provider=aws
        secret_key: "aws_secret_key"        # AWS Secret key, only used when cloud_provider=aws
  
      # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
      # the cluster has already been created.
      k8s:
        region: "us-phoenix-1"
        context: "context-c667vpx6nga"
        cluster: "cluster-c667vpx6nga"
        config_file: "/home/davidh/.kube/config"

      # Hashicorp Vault server address and root-token. Vault should be unsealed.
      # Do not check-in root_token
      vault:
        url: "http://129.146.202.41:8200"
        root_token: "s.XxiriNSclq7sSf7TXEpxKoOZ"
        secret_path: "secret"
      # Git Repo details which will be used by GitOps/Flux.
      # Do not check-in git_access_token
      gitops:
        git_protocol: "ssh" # Option for git over https or ssh
        git_url: "git@github.com:drhenderson89/baf.git"         # Gitops https or ssh url for flux value files 
        branch: "main"           # Git branch where release is being made
        release_dir: "platforms/hyperledger-fabric/releases" # Relative Path in the Git repo for flux sync per environment. 
        chart_source: "platforms/hyperledger-fabric/charts"     # Relative Path where the Helm charts are stored in Git repo
        git_repo: "github.com/drhenderson89/baf.git"   # Gitops git repository URL for git push  (without https://)
        username: "davidh"          # Git Service user who has rights to check-in in all branches
        # password: "git_access_token"          # Git Server user password/token (Optional for ssh; Required for https)
        email: "davidh@rockportsoft.com"                # Email to use in git config
        private_key: "/home/davidh/gitops_config/gitops"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)
        
      services:
        ca:
          name: ca
          subject: "/C=GB/ST=London/L=London/O=ANSP/CN=ca.ansp-net.ca.rockportsoft.com"
          type: ca
          grpc:
            port: 7054
        peers:
        - peer:
          name: peer0          
          type: anchor    # This can be anchor/nonanchor. Atleast one peer should be anchor peer. 
          gossippeeraddress: peer0.ansp-net:7051 # Internal Address of the other peer in same Org for gossip, same peer if there is only one peer 
          peerAddress: peer0.ansp-net.ca.rockportsoft.com:8443 # External URI of the peer
          certificate: "/home/davidh/peerorg/anspca.crt" # certificate path for peer
          cli: enabled      # Creates a peer cli pod depending upon the (enabled/disabled) tag.         
          grpc:
            port: 7051
          events:
            port: 7053
          couchdb:
            port: 5984
          restserver:
            targetPort: 20001
            port: 20001 
          expressapi:
            targetPort: 3000
            port: 3000
          chaincode:
            name: "marbles"   #This has to be replaced with the name of the chaincode
            version: "1"   #This has to be replaced with the version of the chaincode
            maindirectory: "chaincode-external/"    #The main directory where chaincode is needed to be placed
            lang: "golang"  # The language in which the chaincode is written ( golang/java/node )
            repository:
              username: "davidh"          # Git Service user who has rights to check-in in all branches
              password: "git_access_token"
              url: "github.com/drhenderson89/fabric-samples.git"
              branch: main 
              path: "marbles/chaincode-external/"    #The path to the chaincode 
            arguments: '"initMarble","marble3","purple","10","ansp"'       #Arguments to be passed along with the chaincode parameters
            endorsements: ""          #Endorsements (if any) provided along with the chaincode
            port: 7052
            nodeport:

    # - organization:
    #   name: warehouse
    #   country: US
    #   state: Massachusetts
    #   location: Boston
    #   subject: "O=Warehouse,OU=Warehouse,L=42.36/-71.06/Boston,C=US"
    #   type: peer
    #   external_url_suffix: org2ambassador.blockchaincloudpoc.com
    #   org_status: new
    #   ca_data:
    #     url: ca.warehouse-net:7054
    #     certificate: file/server.crt
      
    #   cloud_provider: aws   # Options: aws, azure, gcp, digitalocean, minikube
    #   aws:
    #     access_key: "aws_access_key"        # AWS Access key, only used when cloud_provider=aws
    #     secret_key: "aws_secret_key"        # AWS Secret key, only used when cloud_provider=aws
  
    #   # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
    #   # the cluster has already been created.
    #   k8s:
    #     region: "cluster_region"
    #     context: "cluster_context"
    #     config_file: "cluster_config"

    #   # Hashicorp Vault server address and root-token. Vault should be unsealed.
    #   # Do not check-in root_token
    #   vault:
    #     url: "vault_addr"
    #     root_token: "vault_root_token"
    #     secret_path: "secret"
    #   # Git Repo details which will be used by GitOps/Flux.
    #   # Do not check-in git_access_token
    #   gitops:
    #     git_protocol: "https" # Option for git over https or ssh
    #     git_url: "https://github.com/<username>/blockchain-automation-framework.git"         # Gitops https or ssh url for flux value files 
    #     branch: "develop"           # Git branch where release is being made
    #     release_dir: "platforms/hyperledger-fabric/releases/dev" # Relative Path in the Git repo for flux sync per environment. 
    #     chart_source: "platforms/hyperledger-fabric/charts"     # Relative Path where the Helm charts are stored in Git repo
    #     git_repo: "github.com/<username>/blockchain-automation-framework.git"   # Gitops git repository URL for git push  (without https://)
    #     username: "git_username"          # Git Service user who has rights to check-in in all branches
    #     password: "git_access_token"          # Git Server user password/token (Optional for ssh; Required for https)
    #     email: "git_email"                # Email to use in git config
    #     private_key: "path_to_private_key"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)

    #   services:
    #     ca:
    #       name: ca
    #       subject: "/C=US/ST=Massachusetts/L=Boston/O=Warehouse/CN=ca.warehouse-net"
    #       type: ca
    #       grpc:
    #         port: 7054
    #     peers:
    #     - peer:
    #       name: peer0          
    #       type: anchor    # This can be anchor/nonanchor. Atleast one peer should be anchor peer.   
    #       gossippeeraddress: peer0.warehouse-net:7051 # Internal Address of the other peer in same Org for gossip, same peer if there is only one peer 
    #       peerAddress: peer0.warehouse-net.org3ambassador.blockchaincloudpoc.com:8443 # External URI of the peer 
    #       certificate: "/path/ca.crt" # certificate path for peer
    #       cli: disabled      # Creates a peer cli pod depending upon the (enabled/disabled) tag.        
    #       grpc:
    #         port: 7051       
    #       events:
    #         port: 7053
    #       couchdb:
    #         port: 5984
    #       restserver:
    #         targetPort: 20001
    #         port: 20001 
    #       expressapi:
    #         targetPort: 3000
    #         port: 3000
    #       chaincode:
    #         name: "chaincode_name"     #This has to be replaced with the name of the chaincode
    #         version: "chaincode_version"     #This has to be replaced with the version of the chaincode
    #         maindirectory: "chaincode_main"   #The main directory where chaincode is needed to be placed
    #         lang: "golang"  # The language in which the chaincode is written ( golang/java/node )
    #         repository:
    #           username: "git_username"          # Git Service user who has rights to check-in in all branches
    #           password: "git_access_token"
    #           url: "github.com/<username>/blockchain-automation-framework.git"
    #           branch: develop
    #           path: "chaincode_src"   #The path to the chaincode 
    #         arguments: 'chaincode_args'     #Arguments to be passed along with the chaincode parameters
    #         endorsements: ""        #Endorsements (if any) provided along with the chaincode
